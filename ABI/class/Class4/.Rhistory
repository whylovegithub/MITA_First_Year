# read Auto data
summary(auto)
#No summary for housepower. Convert to number
auto$horsepower=as.numeric(auto$horsepower)
summary(auto)
#remove missing values
auto_omit <- na.omit(auto)
dim(auto_omit)
summary(auto_omit)
lapply(auto_omit,is.numeric)
unlist(lapply(auto_omit,is.numeric))
auto_omit_num <- auto_omit[,unlist(lapply(auto_omit,is.numeric))]
head(auto_omit_num)
boxplot(auto_omit_num)          #Outliers :horsepower and acceleration
#Install corrplot
library(corrplot)
corrplot.mixed(cor(auto_omit_num), order = 'AOE')
#The stronget linear association with mpg is weight
plot(auto_omit_num$weight,auto_omit_num$mpg)       # Association has a curvature
corrplot(cor(auto_omit_num))
#Correlations###Outliers :horsepower and acceleration
#Change cylinders to factor
auto_omit$cylinders <- as.factor(auto_omit$cylinders)
plot(auto_omit$cylinders , auto_omit$mpg,main="Car Auto Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon" )
table(auto_omit$cylinders)              ### different # cars for 4 and 6 cylinders
auto.df <- data.frame(auto_omit)
#The function data.frame() creates data frames, tightly coupled collections of variables which share many
#of the properties of matrices and of lists, used as the fundamental data structure by most of R's modeling software.
head(auto.df)
names(auto.df)
auto.df.4 <- subset(auto.df,cylinders==4)
head(auto.df.4)
#### You can use filter also
auto_4  <- filter(auto_omit,auto_omit$cylinders==4)
head(auto_4)
auto.df.6 <- subset(auto.df,cylinders==6)
head(auto.df.6)
# one sample t test
t.test(auto.df.4$mpg, mu = 0)   #Null hypothesis Mean is equal to zero
#alternative hypothesys the mean is not equal to 0
t.test(auto.df.4$mpg,auto.df.6$mpg)
auto_4 <- subset(rows=auto_omit$cylinders == 4, data=auto_omit)
auto_omit$cylinders == 4,c(auto_omit$cylinders,auto_omit$mpg))
# Generate a vector of 100 values between -4 and 4 to plot he x axis
x <- seq(-4, 4, length = 100)
x
# Simulate the t-distribution
y_1 <- dt(x, df = 4)
y_2 <- dt(x, df = 6)
y_3 <- dt(x, df = 8)
y_4 <- dt(x, df = 10)
y_5 <- dt(x, df = 1000)
# Plot the t-distributions
plot(x, y_1, type = "l", lwd = 2, xlab = "t-value", ylab = "Density",
main = "Comparison of t-distributions", col = "black")
lines(x, y_2, col = "red")
lines(x, y_3, col = "orange")
lines(x, y_4, col = "green")
lines(x, y_5, col = "blue")
# Add a legend
legend("topright", c("df = 4", "df = 6", "df = 8", "df = 10", "df = 1000"), col = c("black", "red", "orange", "green", "blue"),
title = "t-distribution", lty = 1)
#######################Compare groups
# Call a library
library(dplyr)
auto<-Auto
`Auto.3.(1)` <- read.csv("C:/Users/whylo/Downloads/Auto-3 (1).csv")
View(`Auto.3.(1)`)
auto<-`Auto.3.(1)`
# read Auto data
summary(auto)
auto$horsepower=as.numeric(auto$horsepower)
summary(auto)
#remove missing values
auto_omit <- na.omit(auto)
dim(auto_omit)
summary(auto_omit)
lapply(auto_omit,is.numeric)
unlist(lapply(auto_omit,is.numeric))
auto_omit_num <- auto_omit[,unlist(lapply(auto_omit,is.numeric))]
head(auto_omit_num)
boxplot(auto_omit_num)          #Outliers :horsepower and acceleration
#Install corrplot
library(corrplot)
corrplot.mixed(cor(auto_omit_num), order = 'AOE')
plot(auto_omit_num$weight,auto_omit_num$mpg)       # Association has a curvature
corrplot(cor(auto_omit_num))
#Change cylinders to factor
auto_omit$cylinders <- as.factor(auto_omit$cylinders)
plot(auto_omit$cylinders , auto_omit$mpg,main="Car Auto Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon" )
table(auto_omit$cylinders)              ### different # cars for 4 and 6 cylinders
auto.df <- data.frame(auto_omit)
#The function data.frame() creates data frames, tightly coupled collections of variables which share many
#of the properties of matrices and of lists, used as the fundamental data structure by most of R's modeling software.
head(auto.df)
names(auto.df)
auto.df.4 <- subset(auto.df,cylinders==4)
head(auto.df.4)
#### You can use filter also
auto_4  <- filter(auto_omit,auto_omit$cylinders==4)
head(auto_4)
auto.df.6 <- subset(auto.df,cylinders==6)
head(auto.df.6)
# one sample t test
t.test(auto.df.4$mpg, mu = 0)   #Null hypothesis Mean is equal to zero
t.test(auto.df.4$mpg,auto.df.6$mpg)
auto_4 <- subset(rows=auto_omit$cylinders == 4, data=auto_omit)
?Boston             # medv - median value of owner-occupied homes in \$1000s.
dim(Boston)
summary(Boston)
corrplot.mixed(cor(Boston), order = 'AOE')  #lstat (pct lower status population) and rm (average # rooms per dwelling have the highest linear association
Boston$chas <- as.factor(Boston$chas)
plot(Boston$chas ,Boston$medv,main="Boston Neighbourhoods median value homes on or off river Charles",
xlab="Off or on river Charles", ylab="Medium Value owned homes" )
Boston.df <- data.frame(Boston)
head(Boston.df)
names(Boston.df)
Boston.df.onriver <- subset(Boston.df,chas==1)
dim(Boston.df.onriver)
Boston.df.offriver <- subset(Boston.df,chas==0)
dim(Boston.df.offriver)
t.test(Boston.df.onriver$medv,Boston.df.offriver$medv)
##############################################################33
# Simple Linear Regression
corrplot.mixed(cor(auto_omit_num), order = 'AOE')
lm.fit_auto=lm(mpg~weight, data = auto_omit)
summary(lm.fit_auto)
coef(lm.fit_auto)
confint(lm.fit_auto)
plot(auto_omit$weight,auto_omit$mpg,main = "Scatterplot MPG and Weight",xlab="Weight", ylab="MPG")
abline(lm.fit_auto,lwd=3,col="red")
plot(auto_omit$weight, residuals(lm.fit_auto), main = "Residuals of Weight and MPG",xlab="Weight", ylab="Residuals")
plot(lm.fit_auto)
View(Boston.df)
plot(Boston$chas ,Boston$medv,main="Boston Neighbourhoods median value homes on or off river Charles",
xlab="Off or on river Charles", ylab="Medium Value owned homes" )
t.test(Boston.df.onriver$medv,Boston.df.offriver$medv)
library(MASS)
library(corrplot)
library(dplyr)
summary(Boston)
head(Boston)
str(Boston)
corrplot.mixed(cor(Boston), order = 'AOE')
#As the plot shows the medv shows a strong relationship with the rm at 0.7, with the lstat at-0.74
#the ptratio at -0.51, several at aroud .40s
Boston.df <- data.frame(Boston)
head(Boston.df)
names(Boston.df)
summary(Boston.df$rm)
Boston$chas <- as.factor(Boston$chas)
Boston.df.rm.3 <- data.frame(Boston.df, 3<=rm && rm< 4);
Boston.df.rm.4 <- data.frame(Boston.df, 4<=rm && rm< 5);
Boston.df.rm.5 <- data.frame(Boston.df, 5<=rm && rm< 6);
Boston.df.rm.6 <- data.frame(Boston.df, 6<=rm && rm< 7);
Boston.df.rm.7 <- data.frame(Boston.df, 7<=rm && rm< 8);
Boston.df.rm.8 <- data.frame(Boston.df, 8<=rm && rm< 9);
t.test(Boston.df.rm.3$medv,Boston.df.rm.4$medv,Boston.df.rm.5$medv,Boston.df.rm.6$medv,Boston.df.rm.7$medv,
Boston.df.rm.8$medv)
library(MASS)
library(corrplot)
library(dplyr)
summary(Boston)
head(Boston)
str(Boston)
corrplot.mixed(cor(Boston), order = 'AOE')
#As the plot shows the medv shows a strong relationship with the rm at 0.7, with the lstat at-0.74
#the ptratio at -0.51, several at aroud .40s
Boston.df <- data.frame(Boston)
head(Boston.df)
names(Boston.df)
Boston$chas <- as.factor(Boston$chas)
Boston$rm <- as.factor(Boston$rm)
summary(Boston.df$rm)
Boston.df.rm.3 <- data.frame(Boston.df, 3<=rm && rm< 4);
Boston.df.rm.4 <- data.frame(Boston.df, 4<=rm && rm< 5);
Boston.df.rm.5 <- data.frame(Boston.df, 5<=rm && rm< 6);
Boston.df.rm.6 <- data.frame(Boston.df, 6<=rm && rm< 7);
Boston.df.rm.7 <- data.frame(Boston.df, 7<=rm && rm< 8);
Boston.df.rm.8 <- data.frame(Boston.df, 8<=rm && rm< 9);
t.test(Boston.df.rm.3$medv,Boston.df.rm.4$medv,Boston.df.rm.5$medv,Boston.df.rm.6$medv,Boston.df.rm.7$medv,
Boston.df.rm.8$medv)
library(MASS)
library(corrplot)
library(dplyr)
summary(Boston)
head(Boston)
str(Boston)
corrplot.mixed(cor(Boston), order = 'AOE')
Boston.df <- data.frame(Boston)
head(Boston.df)
names(Boston.df)
Boston$chas <- as.factor(Boston$chas)
Boston$rm <- as.factor(Boston$rm)
summary(Boston.df$rm)
Boston.df.rm.3 <- data.frame(Boston.df, 3<=rm && rm< 4);
# Generate a vector of 100 values between -4 and 4 to plot he x axis
x <- seq(-4, 4, length = 100)
x
# Simulate the t-distribution
y_1 <- dt(x, df = 4)
y_2 <- dt(x, df = 6)
y_3 <- dt(x, df = 8)
y_4 <- dt(x, df = 10)
y_5 <- dt(x, df = 1000)
# Plot the t-distributions
plot(x, y_1, type = "l", lwd = 2, xlab = "t-value", ylab = "Density",
main = "Comparison of t-distributions", col = "black")
library(MASS)
library(corrplot)
library(dplyr)
summary(Boston)
head(Boston)
str(Boston)
corrplot.mixed(cor(Boston), order = 'AOE')
#As the plot shows the medv shows a strong relationship with the rm at 0.7, with the lstat at-0.74
#the ptratio at -0.51, several at aroud .40s
Boston.df <- data.frame(Boston)
head(Boston.df)
names(Boston.df)
Boston$chas <- as.factor(Boston$chas)
#Boston$rm <- as.factor(Boston$rm)
summary(Boston.df$rm)
Boston.df.rm.3 <- subset(Boston.df, 3<=rm && rm< 4);
Boston.df.rm.4 <- subset(Boston.df, 4<=rm && rm< 5);
Boston.df.rm.5 <- subset(Boston.df, 5<=rm && rm< 6);
Boston.df.rm.6 <- subset(Boston.df, 6<=rm && rm< 7);
Boston.df.rm.7 <- subset(Boston.df, 7<=rm && rm< 8);
Boston.df.rm.8 <- subset(Boston.df, 8<=rm && rm< 9);
t.test(Boston.df.rm.3$medv,Boston.df.rm.4$medv,Boston.df.rm.5$medv,Boston.df.rm.6$medv,Boston.df.rm.7$medv,
Boston.df.rm.8$medv)
Boston$rm <- as.factor(Boston$rm)
summary(Boston.df$rm)
Boston.df.rm.3 <- subset(Boston.df, 3<=rm && rm< 4);
Boston$rm <- numeric(Boston$rm)
Boston$rm <- as.numeric(as.character(Boston$rm))
Boston$rm <- as.numeric(as.character(Boston$rm))
summary(Boston.df$rm)
Boston.df.rm.3 <- subset(Boston.df, 3<=rm && rm< 4);
library(MASS)
library(corrplot)
library(dplyr)
summary(Boston)
head(Boston)
str(Boston)
corrplot.mixed(cor(Boston), order = 'AOE')
Boston$chas <- as.factor(Boston$chas)
Boston$rm <- as.numeric(as.character(Boston$rm))
Boston.df <- data.frame(Boston)
head(Boston.df)
names(Boston.df)
summary(Boston.df$rm)
Boston.df.rm.3 <- subset(Boston.df, 3<=rm && rm< 4);
Boston.df.rm.4 <- subset(Boston.df, 4<=rm && rm< 5);
Boston.df.rm.5 <- subset(Boston.df, 5<=rm && rm< 6);
Boston.df.rm.6 <- subset(Boston.df, 6<=rm && rm< 7);
Boston.df.rm.7 <- subset(Boston.df, 7<=rm && rm< 8);
Boston.df.rm.8 <- subset(Boston.df, 8<=rm && rm< 9);
t.test(Boston.df.rm.3$medv,Boston.df.rm.4$medv,Boston.df.rm.5$medv,Boston.df.rm.6$medv,Boston.df.rm.7$medv,
Boston.df.rm.8$medv)
t.test(Boston.df.rm.3$medv,Boston.df.rm.4$medv)
View(Boston.df.rm.3)
View(Boston.df.rm.4)
View(Boston.df.rm.5)
View(Boston.df.rm.6)
View(Boston.df.rm.7)
View(Boston.df.rm.6)
Boston.df.rm.3 <- filter(Boston.df, 3<=Boston.df$rm && Boston.df$rm< 4);
View(Boston.df.rm.3)
Boston.df.rm.3 <- filter(Boston.df, 3<=Boston.df$rm);
Boston.df.rm.3 <- filter(Boston.df, 4>Boston.df$rm);
View(Boston.df.rm.3)
Boston.df.rm.7 <- filter(Boston.df, 7<=Boston.df$rm && Boston.df$rm< 8);
Boston.df.rm.3 <- filter(Boston.df, 3<=Boston.df$rm);
Boston.df.rm.3 <- filter(Boston.df, Boston.df$rm< 4);
Boston.df.rm.4 <- filter(Boston.df, 4<=Boston.df$rm);
Boston.df.rm.4 <- filter(Boston.df, Boston.df$rm< 5);
Boston.df.rm.5 <- filter(Boston.df, 5<=Boston.df$rm);
Boston.df.rm.5 <- filter(Boston.df, Boston.df$rm< 6);
Boston.df.rm.6 <- filter(Boston.df, 6<=Boston.df$rm);
Boston.df.rm.6 <- filter(Boston.df, Boston.df$rm< 7);
Boston.df.rm.7 <- filter(Boston.df, 7<=Boston.df$rm);
Boston.df.rm.7 <- filter(Boston.df, Boston.df$rm< 8);
Boston.df.rm.8 <- filter(Boston.df, 8<=Boston.df$rm);
Boston.df.rm.8 <- filter(Boston.df, Boston.df$rm< 9);
t.test(Boston.df.rm.3$medv,Boston.df.rm.4$medv)
t.test(Boston.df.rm.3$medv,Boston.df.rm.4$medv,Boston.df.rm.5$medv)
t.test(Boston.df.rm.4$medv,Boston.df.rm.5$medv)
t.test(Boston.df.rm.5$medv,Boston.df.rm.6$medv)
t.test(Boston.df.rm.3$medv,Boston.df.rm.4$medv)
t.test(Boston.df.rm.4$medv,Boston.df.rm.5$medv)
t.test(Boston.df.rm.5$medv,Boston.df.rm.6$medv)
t.test(Boston.df.rm.6$medv,Boston.df.rm.7$medv)
t.test(Boston.df.rm.7$medv,Boston.df.rm.8$medv)
plot(Boston.df$rm, Boston.df$medv)
t.test(Boston.df.rm.3$medv,Boston.df.rm.4$medv)
plot(Boston.df$rm, Boston.df$medv, main="the scatter plot of rm and medv",xlab="rm",ylab="medv")
### Read library
library(MASS)
library(ggplot2)
# Generate a vector of 100 values between -4 and 4 to plot he x axis
x <- seq(-4, 4, length = 100)
x
# Simulate the t-distribution
y_1 <- dt(x, df = 4)
y_2 <- dt(x, df = 6)
y_3 <- dt(x, df = 8)
y_4 <- dt(x, df = 10)
y_5 <- dt(x, df = 1000)
# Plot the t-distributions
plot(x, y_1, type = "l", lwd = 2, xlab = "t-value", ylab = "Density",
main = "Comparison of t-distributions", col = "black")
lines(x, y_2, col = "red")
lines(x, y_3, col = "orange")
lines(x, y_4, col = "green")
lines(x, y_5, col = "blue")
# Add a legend
legend("topright", c("df = 4", "df = 6", "df = 8", "df = 10", "df = 1000"), col = c("black", "red", "orange", "green", "blue"),
title = "t-distribution", lty = 1)
#######################Compare groups
# Call a library
library(dplyr)
auto<-`Auto.3.(1)`
`Auto.3.(1)` <- read.csv("C:/Users/whylo/Downloads/Auto-3 (1).csv")
View(`Auto.3.(1)`)
# read Auto data
summary(auto)
#######################Compare groups
# Call a library
library(dplyr)
auto<-`Auto.3.(1)`
# read Auto data
summary(auto)
auto$horsepower=as.numeric(auto$horsepower)
summary(auto)
#remove missing values
auto_omit <- na.omit(auto)
dim(auto_omit)
summary(auto_omit)
lapply(auto_omit,is.numeric)
unlist(lapply(auto_omit,is.numeric))
auto_omit_num <- auto_omit[,unlist(lapply(auto_omit,is.numeric))]
head(auto_omit_num)
boxplot(auto_omit_num)          #Outliers :horsepower and acceleration
#Install corrplot
library(corrplot)
corrplot.mixed(cor(auto_omit_num), order = 'AOE')
plot(auto_omit_num$weight,auto_omit_num$mpg)       # Association has a curvature
corrplot(cor(auto_omit_num))
#Change cylinders to factor
auto_omit$cylinders <- as.factor(auto_omit$cylinders)
plot(auto_omit$cylinders , auto_omit$mpg,main="Car Auto Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon" )
table(auto_omit$cylinders)              ### different # cars for 4 and 6 cylinders
auto.df <- data.frame(auto_omit)
#The function data.frame() creates data frames, tightly coupled collections of variables which share many
#of the properties of matrices and of lists, used as the fundamental data structure by most of R's modeling software.
head(auto.df)
names(auto.df)
auto.df.4 <- subset(auto.df,cylinders==4)
head(auto.df.4)
#### You can use filter also
auto_4  <- filter(auto_omit,auto_omit$cylinders==4)
head(auto_4)
auto.df.6 <- subset(auto.df,cylinders==6)
head(auto.df.6)
# one sample t test
t.test(auto.df.4$mpg, mu = 0)   #Null hypothesis Mean is equal to zero
t.test(auto.df.4$mpg,auto.df.6$mpg)
auto_4 <- subset(rows=auto_omit$cylinders == 4, data=auto_omit)
auto_omit$cylinders == 4,c(auto_omit$cylinders,auto_omit$mpg))
?Boston             # medv - median value of owner-occupied homes in \$1000s.
dim(Boston)
summary(Boston)
corrplot.mixed(cor(Boston), order = 'AOE')  #lstat (pct lower status population) and rm (average # rooms per dwelling have the highest linear association
Boston$chas <- as.factor(Boston$chas)
plot(Boston$chas ,Boston$medv,main="Boston Neighbourhoods median value homes on or off river Charles",
xlab="Off or on river Charles", ylab="Medium Value owned homes" )
Boston.df <- data.frame(Boston)
head(Boston.df)
names(Boston.df)
Boston.df.onriver <- subset(Boston.df,chas==1)
dim(Boston.df.onriver)
Boston.df.offriver <- subset(Boston.df,chas==0)
dim(Boston.df.offriver)
t.test(Boston.df.onriver$medv,Boston.df.offriver$medv)
##############################################################33
# Simple Linear Regression
corrplot.mixed(cor(auto_omit_num), order = 'AOE')
lm.fit_auto=lm(mpg~weight, data = auto_omit)
summary(lm.fit_auto)
coef(lm.fit_auto)
confint(lm.fit_auto)
plot(auto_omit$weight,auto_omit$mpg,main = "Scatterplot MPG and Weight",xlab="Weight", ylab="MPG")
abline(lm.fit_auto,lwd=3,col="red")
plot(auto_omit$weight, residuals(lm.fit_auto), main = "Residuals of Weight and MPG",xlab="Weight", ylab="Residuals")
plot(lm.fit_auto)
#Code quadratic
auto_omit$weight2 <- auto_omit$weight*auto_omit$weight
# Include quadratic
lm.fit2_auto=lm(mpg~weight+weight2,data=auto_omit)
#Code quadratic
auto_omit$weight2 <- auto_omit$weight*auto_omit$weight
# Include quadratic
lm.fit2_auto=lm(mpg~weight+weight2,data=auto_omit)
summary(lm.fit_auto)              #Initial  R2 of 69%
summary(lm.fit2_auto)             #Quaratic R2 of 71%
plot(lm.fit2_auto)
##############################################################33
# Simple Linear Regression
corrplot.mixed(cor(auto_omit_num), order = 'AOE')
lm.fit_auto=lm(mpg~weight, data = auto_omit)
summary(lm.fit_auto)
coef(lm.fit_auto)
confint(lm.fit_auto)
plot(auto_omit$weight,auto_omit$mpg,main = "Scatterplot MPG and Weight",xlab="Weight", ylab="MPG")
abline(lm.fit_auto,lwd=3,col="red")
lm.fit_rm=lm(medv~rm, data = Boston.df)
summary(lm.fit_rm)
coef(lm.fit_rm)
confint(lm.fit_rm)
abline(lm.fit_rm,lwd=3,col="red")
plot(Boston.df$rm, Boston.df$medv, main="the scatter plot of rm and medv",xlab="rm",ylab="medv")
coef(lm.fit_auto)
confint(lm.fit_auto)
plot(auto_omit$weight,auto_omit$mpg,main = "Scatterplot MPG and Weight",xlab="Weight", ylab="MPG")
abline(lm.fit_auto,lwd=3,col="red")
plot(auto_omit$weight, residuals(lm.fit_auto), main = "Residuals of Weight and MPG",xlab="Weight", ylab="Residuals")
plot(Boston.df$rm, Boston.df$medv, main="the scatter plot of rm and medv",xlab="rm",ylab="medv")
abline(lm.fit_rm,lwd=3,col="red")
lm.fit_rm2=lm(medv~rm*rm2, data = Boston.df)
lm.fit_rm2=lm(medv~rm*rm, data = Boston.df)
rm2<-Boston.df$rm*Boston.df$rm
lm.fit_rm2=lm(medv~rm*rm, data = Boston.df)
summary(lm.fit_rm2)
coef(lm.fit_rm2)
confint(lm.fit_rm2)
plot(rm2, Boston.df$medv, main="the scatter plot of rm and medv",xlab="rm2",ylab="medv")
abline(lm.fit_rm2,lwd=3,col="red")
rm2<-Boston.df$rm*Boston.df$rm
lm.fit_rm2=lm(medv~rm*rm, data = Boston.df)
summary(lm.fit_rm2)
coef(lm.fit_rm2)
confint(lm.fit_rm2)
plot(rm2, Boston.df$medv, main="the scatter plot of rm and medv",xlab="rm2",ylab="medv")
abline(lm.fit_rm2,lwd=3,col="red")
rm2<-Boston.df$rm*Boston.df$rm
lm.fit_rm2=lm(medv~rm*rm, data = Boston.df)
summary(lm.fit_rm2)
coef(lm.fit_rm2)
confint(lm.fit_rm2)
plot(rm2, Boston.df$medv, main="the scatter plot of rm and medv",xlab="rm2",ylab="medv")
abline(lm.fit_rm2,lwd=3,col="red")
plot(Boston.df$rm, Boston.df$medv, main="the scatter plot of rm and medv",xlab="rm",ylab="medv")
lm.fit_rm=lm(medv~rm, data = Boston.df)
summary(lm.fit_rm)
rm2<- rm*rm
Boston$rm <- as.numeric(as.character(Boston$rm))
rm2<- rm*rm
lm.fit_rm2=lm(medv~(rm*rm), data = Boston.df)
summary(lm.fit_rm2)
coef(lm.fit_rm2)
confint(lm.fit_rm2)
plot(rm2, Boston.df$medv, main="the scatter plot of rm2 and medv",xlab="rm2",ylab="medv")
abline(lm.fit_rm2,lwd=3,col="red")
abline(lm.fit_rm2,lwd=4,col="green")
plot(Boston.df$rm, Boston.df$medv, main="the scatter plot of rm and medv",xlab="rm",ylab="medv")
lm.fit_rm=lm(medv~rm, data = Boston.df)
summary(lm.fit_rm)
coef(lm.fit_rm)
confint(lm.fit_rm)
plot(Boston.df$rm, Boston.df$medv, main="the scatter plot of rm and medv",xlab="rm",ylab="medv")
abline(lm.fit_rm,lwd=3,col="red")
lm.fit_rm2(Boston.df$medv~（Boston.df$rm*Boston.df$rm))
lm.fit_rm2=lm(Boston.df$medv~(Boston.df$rm*Boston.df$rm))
summary(lm.fit_rm2)
lm.fit_rmb=lm(Boston.df$medv~rmb)
rmb=Boston.df$rm*Boston.df$rm
lm.fit_rmb=lm(Boston.df$medv~rmb)
summary(lm.fit_rmb)
plot(Boston.df$rm*Boston.df$rm)
rmb=Boston.df$rm*Boston.df$rm
lm.fit_rmb=lm(Boston.df$medv~rmb)
summary(lm.fit_rmb)
plot(rmb~Boston.df$medv)
plot(Boston.df$medv~rmb)
abline(lm.fit_rmb,lwd=3,col="red")
Boston.df$rm2<-Boston.df$rm*Boston.df$rm
lm.fit_2=lm(Boston.df$medv~Boston.df$rm2)
summary(lm.fit_2)
plot(Boston.df$medv~Boston.df$rm2)
abline(lm.fit_2,lwd=3,col="red")
#Add quadratic
lm.fit_3=lm(Boston.df$medv~Boston.df$rm2+Boston.df$rm)
summary(lm.fit_3)
plot(lm.fit_3)
auto$horsepower=as.numeric(auto$horsepower)
summary(auto)
#remove missing values
auto_omit <- na.omit(auto)
dim(auto_omit)
summary(auto_omit)
lapply(auto_omit,is.numeric)
lapply(Boston.df)
lapply(Boston.df,is.numeric)
unlist(Boston.df,is.numeric)
unlist(lapply(Boston.df,is.numeric))
lm.fit_4=lm(Boston.df$medv~Boston.df$rm2+Boston.df$rm+Boston.df$lstat)
summary(lm.fit_4)
plot(lm.fit_4)
